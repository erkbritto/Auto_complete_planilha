from basics.find_ticket_by_id import Message
from typing import List
from basics.qualification import Qualification

# 1a8da73000f2467f8b61840615ba4858

class Analyzer990 :

    def isValid(
        self,
        messagesClient: List[Message],
        allMessages: List[Message],
    ) -> bool:

        if not (len(messagesClient) == 46):
            return False
    
        if not (messagesClient[1]["sender"] == "bot" and messagesClient[1]["message"].startswith("Seja bem-vindo(a) Ã  Nio Digital!\n\nSou o AlÃª, seu assistente virtual.\n\nPara obter informaÃ§Ãµes sob")):
            return False
    
        if not (messagesClient[3]["sender"] == "bot" and messagesClient[3]["message"].startswith("Ã“timo. Em que posso ajudar?\nã…¤ *Digite a opÃ§Ã£o desejada para*:\n\n1 - Limite disponÃ­vel para utiliza")):
            return False
    
        if not (messagesClient[5]["sender"] == "bot" and messagesClient[5]["message"].startswith("VocÃª jÃ¡ fez o download do nosso aplicativo NIO DigitalðŸ“²? \nNele, vocÃª pode verificar o limite, consu")):
            return False
    
        if not (messagesClient[7]["sender"] == "bot" and messagesClient[7]["message"].startswith("Tivemos um problema para entender sua solicitaÃ§Ã£o por favor tente novamente")):
            return False
    
        if not (messagesClient[9]["sender"] == "bot" and messagesClient[9]["message"].startswith("Desculpe nÃ£o entendi. Retornaremos para o inÃ­cio.\n\n Seja bem-vindo(a) Ã  Nio Digital!\n\nSou o AlÃª,")):
            return False
    
        if not (messagesClient[11]["sender"] == "bot" and messagesClient[11]["message"].startswith("NÃ£o conseguimos localizar o CPF informado, digite-o novamente, mas apenas os nÃºmeros, ok?")):
            return False
    
        if not (messagesClient[13]["sender"] == "bot" and messagesClient[13]["message"].startswith("Ã“timo. Em que posso ajudar?\nã…¤ *Digite a opÃ§Ã£o desejada para*:\n\n1 - Limite disponÃ­vel para utiliza")):
            return False
    
        if not (messagesClient[15]["sender"] == "bot" and messagesClient[15]["message"].startswith("*Digite a opÃ§Ã£o desejada para atualizaÃ§Ã£o*:\n\n1 - E-mail\n2 - Nome\n3 - EndereÃ§o\n4 - RG\n5 - Telef")):
            return False
    
        if not (messagesClient[17]["sender"] == "bot" and messagesClient[17]["message"].startswith("Para atualizaÃ§Ã£o do telefone, peÃ§o que nos envie seu nome completo, CPF, o protocolo deste atendimen")):
            return False
    
        if not (messagesClient[19]["sender"] == "bot" and messagesClient[19]["message"].startswith("Tivemos um problema para entender sua solicitaÃ§Ã£o por favor tente novamente")):
            return False
    
        if not (messagesClient[21]["sender"] == "bot" and messagesClient[21]["message"].startswith("Desculpe nÃ£o entendi. Retornaremos para o inÃ­cio.\n\n Seja bem-vindo(a) Ã  Nio Digital!\n\nSou o AlÃª,")):
            return False
    
        if not (messagesClient[23]["sender"] == "bot" and messagesClient[23]["message"].startswith("Ã“timo. Em que posso ajudar?\nã…¤ *Digite a opÃ§Ã£o desejada para*:\n\n1 - Limite disponÃ­vel para utiliza")):
            return False
    
        if not (messagesClient[25]["sender"] == "bot" and messagesClient[25]["message"].startswith("*Digite a opÃ§Ã£o desejada para*:\n\n1 - Bloqueio\n2 - Desbloqueio\n3 - Segunda via ou cartÃ£o adiciona")):
            return False
    
        if not (messagesClient[27]["sender"] == "bot" and messagesClient[27]["message"].startswith("Para efetuar o desbloqueio do seu cartÃ£o, NIO Digital, precisamos que nos forneÃ§a algumas informaÃ§Ãµe")):
            return False
    
        if not (messagesClient[29]["sender"] == "bot" and messagesClient[29]["message"].startswith("Qual o nome completo da sua mÃ£e?")):
            return False
    
        if not (messagesClient[31]["sender"] == "bot" and messagesClient[31]["message"].startswith("Qual a sua data de nascimento? (dd/mm/aaaa)")):
            return False
    
        if not (messagesClient[33]["sender"] == "bot" and messagesClient[33]["message"].startswith("CartÃ£o desbloqueado com sucesso.\nðŸ’» Acesse o nosso site e cadastre a sua senha:\nhttps://niodigital.")):
            return False
    
        if not (messagesClient[35]["sender"] == "bot" and messagesClient[35]["message"].startswith("Tivemos um problema para entender sua solicitaÃ§Ã£o por favor tente novamente")):
            return False
    
        if not (messagesClient[37]["sender"] == "bot" and messagesClient[37]["message"].startswith("Desculpe nÃ£o entendi. Retornaremos para o inÃ­cio.\n\n Seja bem-vindo(a) Ã  Nio Digital!\n\nSou o AlÃª,")):
            return False
    
        if not (messagesClient[39]["sender"] == "bot" and messagesClient[39]["message"].startswith("Ã“timo. Em que posso ajudar?\nã…¤ *Digite a opÃ§Ã£o desejada para*:\n\n1 - Limite disponÃ­vel para utiliza")):
            return False
    
        if not (messagesClient[41]["sender"] == "bot" and messagesClient[41]["message"].startswith("*Digite a opÃ§Ã£o desejada para atualizaÃ§Ã£o*:\n\n1 - E-mail\n2 - Nome\n3 - EndereÃ§o\n4 - RG\n5 - Telef")):
            return False
    
        if not (messagesClient[43]["sender"] == "bot" and messagesClient[43]["message"].startswith("Para atualizaÃ§Ã£o do telefone, peÃ§o que nos envie seu nome completo, CPF, o protocolo deste atendimen")):
            return False
    
        if not (messagesClient[45]["sender"] == "bot" and messagesClient[45]["message"].startswith("Tivemos um problema para entender sua solicitaÃ§Ã£o por favor tente novamente")):
            return False
    
        return True

    def getQualifications(
            self,
            messagesClient: List[Message],
            allMessages: List[Message],
        ) -> Qualification:
        return {
            "selectedOption": '',
            "customerJourney": '',
            "finalizationOfTheContract": '',
        }
    