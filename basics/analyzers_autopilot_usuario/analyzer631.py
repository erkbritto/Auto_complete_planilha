from basics.find_ticket_by_id import Message
from typing import List
from basics.qualification import Qualification

# 8f003894fdc7420fb8eb58fa042946c9

class Analyzer631 :

    def isValid(
        self,
        messagesClient: List[Message],
        allMessages: List[Message],
    ) -> bool:

        if not (len(messagesClient) == 22):
            return False
    
        if not (messagesClient[1]["sender"] == "bot" and messagesClient[1]["message"].startswith("Desculpe nÃ£o entendi. Retornaremos para o inÃ­cio.\n\n Seja bem-vindo(a) Ã  Nio Digital!\n\nSou o AlÃª,")):
            return False
    
        if not (messagesClient[3]["sender"] == "bot" and messagesClient[3]["message"].startswith("NÃ£o conseguimos localizar o CPF informado, digite-o novamente, mas apenas os nÃºmeros, ok?")):
            return False
    
        if not (messagesClient[5]["sender"] == "bot" and messagesClient[5]["message"].startswith("Ã“timo. Em que posso ajudar?\nã…¤ *Digite a opÃ§Ã£o desejada para*:\n\n1 - Limite disponÃ­vel para utiliza")):
            return False
    
        if not (messagesClient[7]["sender"] == "bot" and messagesClient[7]["message"].startswith("Por favor informe os 4 Ãºltimos dÃ­gitos do cartÃ£o que deseja consultar.")):
            return False
    
        if not (messagesClient[9]["sender"] == "bot" and messagesClient[9]["message"].startswith("*Tudo bem. Digite a opÃ§Ã£o desejada para*:\n\n1 - Valor mÃ­nimo da fatura\n2 - Ãšltimas transaÃ§Ãµes\n3 -")):
            return False
    
        if not (messagesClient[11]["sender"] == "bot" and messagesClient[11]["message"].startswith("JÃ¡ faz mais de 5 dias que efetuou o pagamento da fatura? (Sim ou NÃ£o)ã…¤")):
            return False
    
        if not (messagesClient[13]["sender"] == "bot" and messagesClient[13]["message"].startswith("Nesse caso, vocÃª deverÃ¡ aguardar a compensaÃ§Ã£o bancÃ¡ria de 3 a 5 dias Ãºteis. ã…¤\nTe ajudo em algo mai")):
            return False
    
        if not (messagesClient[15]["sender"] == "bot" and messagesClient[15]["message"].startswith("*Digite a opÃ§Ã£o desejada para*:\n\n1 - Limite disponÃ­vel para utilizaÃ§Ã£o\n2 - InformaÃ§Ãµes sobre a su")):
            return False
    
        if not (messagesClient[17]["sender"] == "bot" and messagesClient[17]["message"].startswith("VocÃª jÃ¡ fez o download do nosso aplicativo NIO DigitalðŸ“²? \nNele, vocÃª pode verificar o limite, consu")):
            return False
    
        if not (messagesClient[19]["sender"] == "bot" and messagesClient[19]["message"].startswith("*Digite a opÃ§Ã£o desejada para*:\n\n1 - Limite disponÃ­vel para utilizaÃ§Ã£o\n2 - InformaÃ§Ãµes sobre a su")):
            return False
    
        if not (messagesClient[21]["sender"] == "bot" and messagesClient[21]["message"].startswith("Para registrar elogios, sugestÃµes ou reclamaÃ§Ãµes, acesso o nosso site www.niodigital.com.br e efetue")):
            return False
    
        return True

    def getQualifications(
            self,
            messagesClient: List[Message],
            allMessages: List[Message],
        ) -> Qualification:
        return {
            "selectedOption": '',
            "customerJourney": '',
            "finalizationOfTheContract": '',
        }
    