from basics.find_ticket_by_id import Message
from typing import List
from basics.qualification import Qualification

# a2d225510c00491ba5cd7315899d6e9c

class Analyzer593 :

    def isValid(
        self,
        messagesClient: List[Message],
        allMessages: List[Message],
    ) -> bool:

        if not (len(messagesClient) == 8):
            return False
    
        if not (messagesClient[1]["sender"] == "bot" and messagesClient[1]["message"].startswith("Seja bem-vindo(a) √† Nio Digital!\n\nSou o Al√™, seu assistente virtual.\n\nPara obter informa√ß√µes sob")):
            return False
    
        if not (messagesClient[3]["sender"] == "bot" and messagesClient[3]["message"].startswith("√ìtimo. Em que posso ajudar?\n„Ö§ *Digite a op√ß√£o desejada para*:\n\n1 - Limite dispon√≠vel para utiliza")):
            return False
    
        if not (messagesClient[5]["sender"] == "bot" and messagesClient[5]["message"].startswith("Voc√™ j√° fez o download do nosso aplicativo NIO Digitalüì≤? \nNele, voc√™ pode verificar o limite, consu")):
            return False
    
        if not (messagesClient[7]["sender"] == "bot" and messagesClient[7]["message"].startswith("*Digite a op√ß√£o desejada para*:\n\n1 - Limite dispon√≠vel para utiliza√ß√£o\n2 - Informa√ß√µes sobre a su")):
            return False
    
        return True

    def getQualifications(
            self,
            messagesClient: List[Message],
            allMessages: List[Message],
        ) -> Qualification:
        return {
            "selectedOption": 'Op√ß√£o 1',
            "customerJourney": 'Selecionou 2 op√ß√µes do menu',
            "finalizationOfTheContract": 'Sem intera√ß√£o - Sem resposta do cliente',
        }
    